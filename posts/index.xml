<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My Msys2 Manual Site</title>
    <link>http://landao314.github.io/posts/</link>
    <description>Recent content in Posts on My Msys2 Manual Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Jun 2017 08:42:34 +0000</lastBuildDate><atom:link href="http://landao314.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Install Msys2 In China</title>
      <link>http://landao314.github.io/posts/1_msys2_install/</link>
      <pubDate>Thu, 08 Jun 2017 08:42:34 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/1_msys2_install/</guid>
      <description>#. 先从国内MSYS2镜像下载对应的版本msys2 压缩包。 #. 再用BOOTICE生成一个VHD镜像，因为用镜像可以打包一堆小文件，U盘携带方便。 #. 挂载VHD镜像并格式化成NTFS #. 解压msys2到这个VHD镜像里，是一个单独的磁盘，非常方便，不用时又可以不挂载， window10支持双击挂载 #. 修改/etc/nsswitch.conf如下，其中landao64是我的用户名，你可以改自己的。 这样改了就不会换电脑时依据系统用户生成新的用户目录
# Begin /etc/nsswitch.conf passwd: files db group: files db db_enum: cache builtin db_home: /home/landao64 db_shell: cygwin desc db_gecos: cygwin desc # End /etc/nsswitch.conf #. 运行mingw64.exe，等待初始化，然后pacman -Syu 两次更新系统的包数据库，和软件。 #. 然后安装如下的依赖软件，依据你的系统选择相应的版本，32位用mingw-w64-x86_64-xxxx, 64位用mingw-64-x86_64-xxxx
$pacman -S mingw-w64-x86_64-gcc $pacman -S mingw-w64-x86_64-cmake $pacman -S mingw-w64-x86_64-llvm $pacman -S mingw-w64-x86_64-python2 $pacman -S mingw-w64-x86_64-python3 $pacman -S mingw-w64-x86_64-make $pacman -S git $pacman -S make #. 下一步就可以编译gvim了</description>
    </item>
    
    <item>
      <title>2. Gvim Install</title>
      <link>http://landao314.github.io/posts/2_gvim_install/</link>
      <pubDate>Thu, 08 Jun 2017 08:42:34 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/2_gvim_install/</guid>
      <description>#. 从github上clone vim的最新代码到/opt/gvim/vim
#mkdir /opt/gvim #cd /opt/gvim #git clone git://github.com/vim/vim.git #cd vim/src #. 修改Make_ming.mak添加如下代码,主要添加python和lua的依赖， 依据你的系统修改MSYS2变量：
UNDER_CYGWIN = no MSYS2=N:/msys64 PYTHON=$(MSYS2)/mingw64 PYTHON_HOME=$(MSYS2)/mingw64 PYTHON_VER=27 PYTHONINC=-I$(MSYS2)/mingw64/include/python2.7 DYNAMIC_PYTHON_DLL=libpython2.7.dll PYTHON3=$(MSYS2)/mingw64 PYTHON3_HOME=$(MSYS2)/mingw64 PYTHON3_VER=39 PYTHON3INC=-I$(MSYS2)/mingw64/include/python3.9 DYNAMIC_PYTHON3_DLL=libpython3.9.dll STATIC_STDCPLUS=yes LUA=$(MSYS2)/mingw64 LUA_VER=54 DYNAMIC_LUA=yes include Make_cyg_ming.mak #. 编译gvim,-j参数是多线程编译，你的CPU几多线程就用2倍的数,如果多次编译 那么可以把下面命令做成脚本。
#mingw32-make -f Make_ming.mak -j 8 #cd .. #mkdir -p vim82-x86_64/vim82 #cp -a runtime/* vim82-x86_64/vim82 #cp -a src/*.exe vim82-x86_64/vim82 #cp -a src/GvimExt/gvimext.dll vim82-x86_64/vim82 #cp -a src/xxd/xxd.exe vim82-x86_64/vim82 #cp -a vimtutor.bat vim82-x86_64/vim82 #cp -a /mingw64/bin/lua54.</description>
    </item>
    
    <item>
      <title>3. YouCompleteMe on Msys2</title>
      <link>http://landao314.github.io/posts/3_youcompleteme-on-msys2/</link>
      <pubDate>Sun, 04 Jun 2017 09:44:08 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/3_youcompleteme-on-msys2/</guid>
      <description>安装MSYS2 先安装MSYS2，然后更换软件源地址： MSYS2国内源 不过文件里的地址过时了，下面有个回复说了新的地址，不过要手动输入。 替换完成，更新一下Msys2的软件
pacman -Syu 安装依赖软件 $pacman -S mingw-w64-i686-gcc $pacman -S mingw-w64-i686-cmake $pacman -S mingw-w64-i686-llvm $pacman -S mingw-w64-i686-python2 $pacman -S mingw-w64-i686-make $pacman -S git 下载YouCompleteMe 可以用vim的插件工具安装，也可以用git手动下载到相应文件夹。github在国内下载可能会 很慢，只有50kB/s，可以参考git代理的方法设置一个代理，可以提速。同时还要更新子模块。
$ git clone https://github.com/Valloric/YouCompleteMe $ cd YouCompleteMe $ git submodule update --init --recursive 编译YouCompleteMe 在home下新建一个ycmd_build目录用于编译的中间文件存放，编译完可以删掉。 找到/mingw32/bin/clang.dll复制一份为clang.dll.4.0不然好像报一个找不到clang.dll.4.0的错
$ mkdir ycmd_build $ cd ycmd_build $ cmake -G &amp;#34;MSYS Makefiles&amp;#34; -DPATH_TO_LLVM_ROOT=/mingw32 -DCMAKE_C_COMPILER=/mingw32/bin/gcc.exe -DCMAKE_CXX_COMPILER=/mingw32/bin/g++.exe -DCMAKE_MAKE_PROGRAM=/mingw32/bin/mingw32-make . /usr/share/vim/vimfiles/plugged/YouCompleteMe/third_party/ycmd/cpp/ 如果不报错就生成了Makefile，这时可以用mingw32-make编译了,多核可以加 -j 参数
$ mingw32-make ycm_core [-j 2*核数] 编辑vimrc 要在vimrc中指定python解释器，不然报windows Error2.</description>
    </item>
    
    <item>
      <title>4. git proxy</title>
      <link>http://landao314.github.io/posts/4_git-proxy/</link>
      <pubDate>Thu, 01 Jun 2017 16:34:53 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/4_git-proxy/</guid>
      <description>我常用的是GoAgent的梯子，即是XX-net 但是一个比较麻烦的问题是Ca根证书要手动导入 这是Windows7下的Msys2环境下的git，linux下类似 首先要设置git的代理服务器
$git config --global http.proxy http://localhost:8087 这时使用git时会报证书错误，所以要导入证书
可以用
GIT_CURL_VERBOSE=true git clone https://google.com 查看CAfile和CApath确定git是用哪一个证书的，linux下应该会是系统证书的地方 但是Msys2下是
D:\msys32\usr\ssl\certs\ca-bundle.crt 于是我将GoAgent的证书直接粘贴到这个文件的未尾，注意不要有多余的空行和字符
现在git下载github上的文件速度可以说大辐提速，从50KB/s跳到1.5MB/s，爽！！</description>
    </item>
    
    <item>
      <title>5. git rsa setting</title>
      <link>http://landao314.github.io/posts/5_github-rsa/</link>
      <pubDate>Thu, 01 Jun 2017 16:34:53 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/5_github-rsa/</guid>
      <description>Github 上密钥对 Github上可以上传公钥，本地保存私钥，这样可以push时不用老输密码。
生成SSH Key ssh-keygen -t rsa -C &amp;#34;your_email@example.com&amp;#34; 这样在/home/chen/.ssh/文件夹下生成两个文件: xyz_rsa.pub和xyz_rsa, 分别是你的公钥和私钥.
然后登录Github上传公钥。
测试SSH Key登录 ssh -T git@github.com 设置项目 git config user.name &amp;#34;your-id&amp;#34; git config user.email &amp;#34;your-id@gmail.com&amp;#34; 就可以直接git push
More info: 简书</description>
    </item>
    
    <item>
      <title>6.vim_im_setting</title>
      <link>http://landao314.github.io/posts/6_vim_im_setting/</link>
      <pubDate>Thu, 01 Jun 2017 16:34:51 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/6_vim_im_setting/</guid>
      <description>Vim setting im auto change betwin modes </description>
    </item>
    
    <item>
      <title>7.vim_markdown_composer</title>
      <link>http://landao314.github.io/posts/7_vim_markdown_composer/</link>
      <pubDate>Thu, 01 Jun 2017 16:34:48 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/7_vim_markdown_composer/</guid>
      <description>Vim markdown composer </description>
    </item>
    
    <item>
      <title>8. Vimim on Msys2</title>
      <link>http://landao314.github.io/posts/8_vimim-on-msys2/</link>
      <pubDate>Thu, 01 Jun 2017 08:42:34 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/8_vimim-on-msys2/</guid>
      <description>安装VIMIM(gvim己带输入法自动切换，vim有插件切换） 先用插件字装工具，安装vimim
Plug &amp;#39;vim-scripts/VimIm&amp;#39; :PlugInstall 再自己整理一个五笔98的码表，先码后字地一个个排好，我是从ibus里的五笔98码表里 提取出来的，用vim整理一下格式就可以用了。不过文件名一定要vimim.xxxx.txt这种格式
gi	#进入中文输入模式 Ctrl+_	#切换中英 Ctrl+^	#切换输入法 最后还是没法切换中英文标点，但是我发现按Alt是可以输入英文标点，至少写这编Markdown 时没有什么大问题。
我了解了一下小狼毫的后端，其实是有可能在vimim的基础上加入支持librime的输入法神器 不过得两方面都得研究清楚，得花时间啊。。。。。。</description>
    </item>
    
    <item>
      <title>9. InstantRst no Msys2</title>
      <link>http://landao314.github.io/posts/9_instantrst-no-msys2/</link>
      <pubDate>Tue, 02 May 2017 11:45:03 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/9_instantrst-no-msys2/</guid>
      <description>InstantRst on Msys2(发现了更好的替代软件markdown composer） 按照 riv.vm官网 按照 InstantRst官网 按照 instant-rst.py官网
先在Msys2上用pacman安装好pip，然后用pip按照官网的地址安装InstantRst vim里用插件工具安装好riv和instantRst.但是这时候vim里:InstantRst只能开服务 不能自动打开浏览器.之前查到问题出在脚本instantRst上.
HOST问题 cd到/mingw/bin,打开instantRst,找到def browse(b,&amp;hellip;&amp;hellip;)函数,添加bhost参数
def browse(b, port, filename, bhost): time.sleep(1) url = &amp;#39;http://&amp;#39; + bhost + &amp;#39;:&amp;#39;+ port 后面调用也要添加bhost参数
if ag.localhost_only: HOST = &amp;#34;localhost&amp;#34; else: # get hostname of local LAN IP HOST = socket.gethostbyname(socket.gethostname()) p = Process(target=browse, args=(ag.browser, ag.port, ag.filename, HOST)) 多线程返回问题 instantRst这个脚本开了线程运行服务后,应该返回到原脚本上,但是在Msys2下其返回到 instantRst.py这个文件上,注意啦是多了&amp;quot;.py&amp;quot;,然后我就复制多一份原来的instantRst并 改为instantRst.py,但因为python的一些问题,要添加freeze_support和rstmain
from multiprocessing import Process,freeze_support def rstmain(): ag = args.parse() if ag.localhost_only: HOST = &amp;#34;localhost&amp;#34; else: # get hostname of local LAN IP HOST = socket.</description>
    </item>
    
    <item>
      <title>10. Install Hugo</title>
      <link>http://landao314.github.io/posts/11_hugo/</link>
      <pubDate>Tue, 02 May 2017 11:41:03 +0000</pubDate>
      
      <guid>http://landao314.github.io/posts/11_hugo/</guid>
      <description>Install Hugo on Msys2 </description>
    </item>
    
  </channel>
</rss>
